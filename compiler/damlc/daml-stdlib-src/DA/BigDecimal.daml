-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE CPP #-}

daml 1.2
module DA.BigDecimal (
    BigDecimal
  , RoundingMode
  , Floor
  , Ceiling
  , TowardZero
  , HalfToEven
  , AwayFromZero
  , HalfTowardZero
  , HalfAwayFromZero
  , toNumeric
) where

#ifdef DAML_UNSTABLE
import GHC.Types (primitive)

-- | Rounding Mode is represented as a type annotation on the BigDecimal type
class RoundingMode r where
    -- | Adjustment to the coefficient required given a computed rounding state and a given sign
    primRoundingMode : BigDecimal r -> Text

data Floor             -- ^ 1.1 -> 1, -1.1 -> -2, 1.5 -> 1, -1.5 -> -2, 1.6 -> 1, -1.6 -> -2, 2.5 -> 2, -2.5 -> -3
data Ceiling           -- ^ 1.1 -> 2, -1.1 -> -1, 1.5 -> 2, -1.5 -> -1, 1.6 -> 2, -1.6 -> -1, 2.5 -> 3, -2.5 -> -2
data TowardZero        -- ^ 1.1 -> 1, -1.1 -> -1, 1.5 -> 1, -1.5 -> -1, 1.6 -> 1, -1.6 -> -1, 2.5 -> 2, -2.5 -> -2
data HalfToEven        -- ^ 1.1 -> 1, -1.1 -> -1, 1.5 -> 2, -1.5 -> -2, 1.6 -> 1, -1.6 -> -1, 2.5 -> 2, -2.5 -> -2
data AwayFromZero      -- ^ 1.1 -> 2, -1.1 -> -2, 1.5 -> 2, -1.5 -> -2, 1.6 -> 2, -1.6 -> -2, 2.5 -> 3, -2.5 -> -3
data HalfTowardZero    -- ^ 1.1 -> 1, -1.1 -> -1, 1.5 -> 1, -1.5 -> -1, 1.6 -> 2, -1.6 -> -2, 2.5 -> 2, -2.5 -> -2
data HalfAwayFromZero  -- ^ 1.1 -> 1, -1.1 -> -1, 1.5 -> 2, -1.5 -> -2, 1.6 -> 2, -1.6 -> -2, 2.5 -> 3, -2.5 -> -3

instance RoundingMode Floor where primRoundingMode = "FLOOR"
instance RoundingMode Ceiling where primRoundingMode = "CEILING"
instance RoundingMode TowardZero where primRoundingMode = "DOWN"
instance RoundingMode HalfToEven where primRoundingMode = "HALF_EVEN"
instance RoundingMode AwayFromZero where primRoundingMode = "UP"
instance RoundingMode HalfTowardZero where primRoundingMode = "HALF_DOWN"
instance RoundingMode HalfAwayFromZero where primRoundingMode = "HALF_UP"

data BigDecimal r = BigDecimal with
    bigDec : BigDec

toNumeric : (RoundingMode r, NumericScale n) => BigDecimal r -> Optional Numeric n
toNumeric d = primitive @"BEbigDecToNumeric" (primRoundingMode d) d.bigDec

toBigDecimal : forall r n. (RoundingMode r, NumericScale n) => Numeric n -> BigDecimal r
toBigDecimal n = BigDecimal with bigDec = primitive @"BEnumericToBigDec" n
